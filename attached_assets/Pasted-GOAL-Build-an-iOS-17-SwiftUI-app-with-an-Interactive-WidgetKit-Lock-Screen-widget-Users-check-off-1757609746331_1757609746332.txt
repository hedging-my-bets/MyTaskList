GOAL
Build an iOS 17+ SwiftUI app with an Interactive WidgetKit Lock Screen widget. Users check off time-slotted tasks. A stage-local progress bar drives pet evolution through 20 forms. If progress drops below 0, the pet de-evolves one stage. The widget is effectively always on the Lock Screen and only updates once per hour. No notifications, no cloud, no social.

HARD CONSTRAINTS

Lock Screen presence via WidgetKit interactive widget.

Visual updates (pet stage + progress bar) occur at most once per hour.

Clickable to-do actions directly from the Lock Screen widget.

No notifications.

All data local (SwiftData or Core Data).

iOS 17+ only.

PLATFORM / STACK

Swift + SwiftUI

WidgetKit (interactive) + AppIntents

SwiftData (or Core Data)

Assets: static PNG/PDF images for pet forms (no animations required)

FEATURES

Time-Slotted To-Do (Today only)

Create/edit/delete tasks with HH:MM time.

Optional rollover toggle (carry incomplete tasks to tomorrow).

Lock Screen widget shows: pet image, stage progress bar (stageXP/threshold), X/Y tasks today, and next task title/time.

Widget actions:

Done: marks the next uncompleted task done.

Snooze 15m: defers the next uncompleted task by 15 minutes.

Tapping the list area deep-links to the appâ€™s Today screen for the full list.

Evolution and De-Evolution (progress-only)

No health stat. Each stage has stageXP and a threshold.

Gains/Losses:

Done on time (within +/- 60 min): +2 stageXP

Done late same day: +1 stageXP

Missed by end of day: -2 stageXP

Daily bonus if >= 80% tasks done: +3 stageXP

Daily penalty if < 40% done: -3 stageXP

Evolve: if stageXP >= threshold(currentStage), advance 1 stage and set stageXP = 0.

De-evolve: if stageXP < 0, drop 1 stage and set stageXP = threshold(newStage) - 1 (floor at 0 if needed).

Difficulty curve: thresholds increase each stage (early stages easy, later stages harder).

Hourly Widget Rule (always-on feel)

Build a WidgetKit timeline with entries at the top of each hour for the next 24 hours.

Pet image and progress bar only change on those hourly entries.

Interactions (Done/Snooze) update app data immediately, but widget visuals reflect on the next hourly tick.

Daily Closeout (no notifications)

At local reset time (default 00:00), on next app launch: compute completion rate, apply daily bonus/penalty, then apply evolve/de-evolve rules, archive yesterday, and seed today (respect rollover).

Exactly one closeout per day.

Widget displays results on the next hourly refresh.

PET CONTENT (20 forms, ocean -> land, last is final)
1 Tadpole
2 Minnow
3 Frog
4 Hermit Crab
5 Starfish
6 Jellyfish
7 Squid
8 Seahorse
9 Dolphin
10 Shark
11 Otter
12 Fox
13 Lynx
14 Wolf
15 Bear
16 Bison
17 Elephant
18 Rhino
19 Lion
20 Floating God (final)

ASSETS

One static image per stage, approx 512x512 transparent PNG/PDF.

Filenames like: pet_tadpole.png, pet_minnow.png, ..., pet_god.png.

THRESHOLDS (tunable; increasing difficulty)
[10, 20, 30, 40, 50, 60, 75, 90, 110, 135, 165, 200, 240, 285, 335, 390, 450, 515, 585, 0]
(Last stage threshold 0 = no further evolution.)

DATA MODEL (SwiftData preferred; Core Data acceptable)

@Model final class TaskItem {
  @Attribute(.unique) var id: UUID
  var title: String
  var scheduledAt: DateComponents // hour, minute local
  var dayKey: String              // "YYYY-MM-DD" local
  var isCompleted: Bool
  var completedAt: Date?
  var snoozedUntil: Date?
}

@Model final class PetState {
  var stageIndex: Int   // 0..19
  var stageXP: Int      // progress within current stage
  var lastCloseoutDayKey: String
}


STAGE CONFIG (hard-code or JSON)

{"stages":[
 {"i":0,"name":"Tadpole","threshold":10,"asset":"pet_tadpole.png"},
 {"i":1,"name":"Minnow","threshold":20,"asset":"pet_minnow.png"},
 {"i":2,"name":"Frog","threshold":30,"asset":"pet_frog.png"},
 {"i":3,"name":"Hermit Crab","threshold":40,"asset":"pet_hermit.png"},
 {"i":4,"name":"Starfish","threshold":50,"asset":"pet_starfish.png"},
 {"i":5,"name":"Jellyfish","threshold":60,"asset":"pet_jellyfish.png"},
 {"i":6,"name":"Squid","threshold":75,"asset":"pet_squid.png"},
 {"i":7,"name":"Seahorse","threshold":90,"asset":"pet_seahorse.png"},
 {"i":8,"name":"Dolphin","threshold":110,"asset":"pet_dolphin.png"},
 {"i":9,"name":"Shark","threshold":135,"asset":"pet_shark.png"},
 {"i":10,"name":"Otter","threshold":165,"asset":"pet_otter.png"},
 {"i":11,"name":"Fox","threshold":200,"asset":"pet_fox.png"},
 {"i":12,"name":"Lynx","threshold":240,"asset":"pet_lynx.png"},
 {"i":13,"name":"Wolf","threshold":285,"asset":"pet_wolf.png"},
 {"i":14,"name":"Bear","threshold":335,"asset":"pet_bear.png"},
 {"i":15,"name":"Bison","threshold":390,"asset":"pet_bison.png"},
 {"i":16,"name":"Elephant","threshold":450,"asset":"pet_elephant.png"},
 {"i":17,"name":"Rhino","threshold":515,"asset":"pet_rhino.png"},
 {"i":18,"name":"Lion","threshold":585,"asset":"pet_lion.png"},
 {"i":19,"name":"Floating God","threshold":0,"asset":"pet_god.png"}
]}


PET ENGINE (progress-only; pure functions)

struct PetEngine {
  static func onCheck(onTime: Bool, pet: inout PetState, cfg: StageCfg) {
    pet.stageXP += onTime ? 2 : 1
    evolve(&pet, cfg)
  }
  static func onMiss(pet: inout PetState, cfg: StageCfg) {
    pet.stageXP -= 2
    deEvolve(&pet, cfg)
  }
  static func onDailyCloseout(rate: Double, pet: inout PetState, cfg: StageCfg) {
    if rate >= 0.8 { pet.stageXP += 3 }
    else if rate < 0.4 { pet.stageXP -= 3 }
    evolve(&pet, cfg); deEvolve(&pet, cfg)
  }
  private static func thresh(_ i:Int,_ c:StageCfg)->Int { c.stages[i].threshold }
  private static func evolve(_ p: inout PetState,_ c:StageCfg){
    while p.stageIndex < c.stages.count-1 && p.stageXP >= thresh(p.stageIndex,c){
      p.stageIndex += 1; p.stageXP = 0
    }
  }
  private static func deEvolve(_ p: inout PetState,_ c:StageCfg){
    while p.stageXP < 0 && p.stageIndex > 0 {
      p.stageIndex -= 1
      p.stageXP = max(0, thresh(p.stageIndex,c) - 1 + p.stageXP)
    }
  }
}


WIDGET TIMELINE AND APPINTENTS

Build timeline entries at the top of each hour for the next 24 hours only.

Entry data: stageIndex, stageXP, threshold, progressRatio, tasksDone, tasksTotal, nextTaskTitle, nextTaskTime.

AppIntents: MarkNextTaskDoneIntent, SnoozeNextTaskIntent(15m).

Rule: Only change widget visuals on hourly entries. Interactions update the data immediately; visuals update on the next hour.

UI (lean)

Today: pet image, stage progress bar (stageXP/threshold), X of Y done, time-ordered list with swipe Done/Snooze.

Settings: reset time (00:00 default), grace window (+/- 60m), rollover toggle, haptics toggle.

Widget: rectangular + small variants; shows pet, progress bar, X/Y today, next task, Done/Snooze, deep link to Today.

NON-FUNCTIONAL

Performance: cold start < 300 ms.

Battery: no polling; WidgetKit hourly timeline only.

Accessibility: Dynamic Type; VoiceOver for stage name and progress ratio.

Privacy: on-device only; Data Not Collected.

ACCEPTANCE

Lock Screen widget installable and visible; no background hacks.

Hourly rule enforced; pet stage/progress only change on hourly ticks.

Done/Snooze actions function from Lock Screen; deep link opens Today.

Evolution/de-evolution rules applied exactly; final stage has no further evolution.

Daily closeout runs once per day and updates on the next hourly refresh.

DELIVERABLES

Xcode workspace with App target + Widget extension (WidgetKit + AppIntents).

SwiftData/Core Data models, PetEngine, Stage config.

Placeholder 20 pet images wired to stages.

Unit tests for PetEngine (evolve, de-evolve, closeout).

README (build/run, widget setup, privacy text).

Instruction to builder: Implement exactly as specified. No notifications. Visual changes only on hourly widget timeline entries. Clickable to-do from the Lock Screen is required.