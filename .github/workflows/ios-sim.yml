name: iOS Simulator Build

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    env:
      DEFAULT_SCHEME: PetProgress
      PROJECT_DIR: ios-native
      PROJECT_FILE: ios-native/PetProgress.xcodeproj

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          check-latest: true

      - name: Build assets (Pillow)
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          python -m pip install pillow
          python ios-native/Tools/build_assets.py

      - name: Install XcodeGen
        run: |
          set -euxo pipefail
          brew update
          brew install xcodegen

      - name: Generate Xcode project
        run: |
          set -euxo pipefail
          cd "$PROJECT_DIR"
          xcodegen generate

      - name: Resolve scheme and destination
        id: resolve
        run: |
          set -euo pipefail

          echo "== List targets/schemes =="
          xcodebuild -list -project "$PROJECT_FILE" || true

          if xcodebuild -list -project "$PROJECT_FILE" | awk '/Schemes:/{flag=1;next}/^$/{flag=0}flag' | grep -qx "$DEFAULT_SCHEME"; then
            SCHEME="$DEFAULT_SCHEME"
          else
            SCHEME="$(xcodebuild -list -project "$PROJECT_FILE" | awk '/Schemes:/{flag=1;next}/^$/{flag=0}flag' | head -n1 | sed 's/^[[:space:]]*//')"
          fi

          # Concrete destination for tests: prefer simctl (robust)
          FIRST_SIM_UUID="$(xcrun simctl list devices available | sed -n 's/^[[:space:]]*iPhone[^()]* (\([0-9A-Fa-f-]\{36\}\)).*/\1/p' | head -n1)"
          if [ -n "$FIRST_SIM_UUID" ]; then
            DEST_TEST="id=${FIRST_SIM_UUID}"
          else
            # Fallback: choose by name if UUID parse fails
            FIRST_SIM_NAME="$(xcodebuild -project "$PROJECT_FILE" -scheme "$SCHEME" -showdestinations 2>/dev/null | sed -n 's/.*platform:iOS Simulator.*name:\([^,}]*\).*/\1/p' | sed 's/^ *//;s/ *$//' | head -n1)"
            if [ -n "$FIRST_SIM_NAME" ]; then
              DEST_TEST="platform=iOS Simulator,name=${FIRST_SIM_NAME}"
            else
              DEST_TEST="platform=iOS Simulator,name=iPhone 16 Pro"
            fi
          fi

          # Generic destination is fine for plain builds
          DEST_BUILD="generic/platform=iOS Simulator"

          echo "SCHEME=$SCHEME" | tee -a "$GITHUB_OUTPUT"
          echo "DEST_BUILD=$DEST_BUILD" | tee -a "$GITHUB_OUTPUT"
          echo "DEST_TEST=$DEST_TEST" | tee -a "$GITHUB_OUTPUT"

      - name: Clean derived data
        run: |
          set -euxo pipefail
          rm -rf "$PWD/DerivedData"

      - name: Build (Simulator)
        run: |
          set -euxo pipefail
          echo "Using scheme: ${{ steps.resolve.outputs.SCHEME }}"
          echo "Using destination: ${{ steps.resolve.outputs.DEST_BUILD }}"
          xcodebuild \
            -project "$PROJECT_FILE" \
            -scheme "${{ steps.resolve.outputs.SCHEME }}" \
            -sdk iphonesimulator \
            -destination "${{ steps.resolve.outputs.DEST_BUILD }}" \
            build \
            -parallelizeTargets \
            -derivedDataPath "$PWD/DerivedData" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            | tee build.log

      - name: Validate Widget appex contents (no storyboard/xib & no forbidden plist keys)
        if: success()
        run: |
          set -euxo pipefail
          APP="$PWD/DerivedData/Build/Products/Debug-iphonesimulator/PetProgress.app"
          WIDGET="$APP/PlugIns/PetProgressWidget.appex"

          echo "== List appex files =="
          find "$WIDGET" -type f | sed 's/^/  /'

          echo "== Check for forbidden UI resources =="
          if find "$WIDGET" -type f \( -name "*.storyboard" -o -name "*.storyboardc" -o -name "*.xib" \) | grep -q .; then
            echo "ERROR: Widget appex contains storyboard/xib files, which is not allowed."
            exit 1
          fi

          echo "== Check Info.plist for forbidden keys =="
          PLIST="$WIDGET/Info.plist"
          for KEY in NSPrincipalClass UIMainStoryboardFile NSMainNibFile NSMainStoryboardFile; do
            if /usr/libexec/PlistBuddy -c "Print :$KEY" "$PLIST" >/dev/null 2>&1; then
              echo "ERROR: $KEY must NOT be present in widget Info.plist"
              /usr/libexec/PlistBuddy -c "Print" "$PLIST" || true
              exit 1
            fi
          done

          echo "Widget appex validation passed."


      - name: Test (Simulator) with result bundle
        run: |
          set -euxo pipefail
          xcodebuild \
            -project "$PROJECT_FILE" \
            -scheme "${{ steps.resolve.outputs.SCHEME }}" \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest,arch=arm64' \
            -enableCodeCoverage YES \
            -resultBundlePath TestResults.xcresult \
            test \
            -derivedDataPath "$PWD/DerivedData" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            | tee test.log

      - name: Upload XCTest result bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: XCTest-Results
          path: TestResults.xcresult
          if-no-files-found: ignore

      - name: Build shipping app (Release) and validate no XCTest embedding
        run: |
          set -euxo pipefail
          echo "== Build Release configuration for shipping validation =="
          xcodebuild \
            -project "$PROJECT_FILE" \
            -scheme "${{ steps.resolve.outputs.SCHEME }}" \
            -configuration Release \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            build \
            -derivedDataPath "$PWD/DerivedData" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            | tee release_build.log

          echo "== Validate shipping app has no XCTest frameworks =="
          APP="$PWD/DerivedData/Build/Products/Release-iphonesimulator/PetProgress.app"

          if [ ! -d "$APP" ]; then
            echo "ERROR: Release app not found at $APP"
            exit 1
          fi

          if [ -d "$APP/Frameworks" ] && \
             find "$APP/Frameworks" -maxdepth 1 2>/dev/null | \
             grep -qE '/(XCTest|Testing|XC[^/]*|XCT[^/]*)\.framework$|/libXCTest[^/]*\.dylib'; then
            echo "::error::Test frameworks found in shipping app bundle:"
            find "$APP/Frameworks" -maxdepth 1 -type d -name '*.framework' 2>/dev/null || true
            find "$APP/Frameworks" -maxdepth 1 -type f -name 'libXCTest*.dylib' 2>/dev/null || true
            exit 1
          fi

          echo "âœ… Shipping app clean - no XCTest frameworks embedded"

      - name: Archive built .app (Simulator)
        if: success()
        run: |
          set -euo pipefail
          mkdir -p build_artifacts
          # Archive the Release build (shipping version)
          RELEASE_APP="$PWD/DerivedData/Build/Products/Release-iphonesimulator/PetProgress.app"
          if [ -d "$RELEASE_APP" ]; then
            echo "Found Release app at: $RELEASE_APP"
            cp -R "$RELEASE_APP" build_artifacts/PetProgress.app
          else
            echo "Release app not found, falling back to Debug build"
            APP_PATH=$(find "$PWD/DerivedData/Build/Products" -type d -name "*.app" -path "*/-iphonesimulator/*" -print0 \
              | xargs -0 -I{} stat -f "%m\t%N" {} \
              | sort -rn \
              | awk 'NR==1{print $2}')
            if [ -z "${APP_PATH:-}" ]; then
              echo "Could not locate a built Simulator .app in DerivedData."
              exit 1
            fi
            echo "Found app at: $APP_PATH"
            cp -R "$APP_PATH" build_artifacts/PetProgress.app
          fi

      - name: Upload artifact (Simulator .app)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: PetProgress-Simulator-App
          path: build_artifacts/PetProgress.app

      - name: Upload xcodebuild logs (on failure or success)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: |
            build.log
            test.log
            release_build.log
          if-no-files-found: ignore
