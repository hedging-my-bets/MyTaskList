name: iOS Simulator Build

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    env:
      DEFAULT_SCHEME: PetProgress
      PROJECT_DIR: ios-native
      PROJECT_FILE: ios-native/PetProgress.xcodeproj

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          check-latest: true

      - name: Build assets (Pillow)
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          python -m pip install pillow
          python ios-native/Tools/build_assets.py

      - name: Install XcodeGen
        run: |
          set -euxo pipefail
          brew update
          brew install xcodegen

      - name: Generate Xcode project
        run: |
          set -euxo pipefail
          cd "$PROJECT_DIR"
          xcodegen generate

      - name: Resolve scheme and destination
        id: resolve
        run: |
          set -euo pipefail

          echo "== List targets/schemes =="
          xcodebuild -list -project "$PROJECT_FILE" || true

          if xcodebuild -list -project "$PROJECT_FILE" | awk '/Schemes:/{flag=1;next}/^$/{flag=0}flag' | grep -qx "$DEFAULT_SCHEME"; then
            SCHEME="$DEFAULT_SCHEME"
          else
            SCHEME="$(xcodebuild -list -project "$PROJECT_FILE" | awk '/Schemes:/{flag=1;next}/^$/{flag=0}flag' | head -n1 | sed 's/^[[:space:]]*//')"
          fi

          # Concrete destination for tests: pick first available iOS Simulator UUID
          FIRST_SIM_UUID="$(xcodebuild -project "$PROJECT_FILE" -scheme "$SCHEME" -showdestinations 2>/dev/null | sed -n 's/.*platform:iOS Simulator.*id:\([^,}]*\).*/\1/p' | head -n1)"
          if [ -n "$FIRST_SIM_UUID" ]; then
            DEST_TEST="id=${FIRST_SIM_UUID}"
          else
            # Fallback: choose by name if UUID parse fails
            FIRST_SIM_NAME="$(xcodebuild -project "$PROJECT_FILE" -scheme "$SCHEME" -showdestinations 2>/dev/null | sed -n 's/.*platform:iOS Simulator.*name:\([^,}]*\).*/\1/p' | sed 's/^ *//;s/ *$//' | head -n1)"
            if [ -n "$FIRST_SIM_NAME" ]; then
              DEST_TEST="platform=iOS Simulator,name=${FIRST_SIM_NAME}"
            else
              DEST_TEST="platform=iOS Simulator,name=iPhone 16 Pro"
            fi
          fi

          # Generic destination is fine for plain builds
          DEST_BUILD="generic/platform=iOS Simulator"

          echo "SCHEME=$SCHEME" | tee -a "$GITHUB_OUTPUT"
          echo "DEST_BUILD=$DEST_BUILD" | tee -a "$GITHUB_OUTPUT"
          echo "DEST_TEST=$DEST_TEST" | tee -a "$GITHUB_OUTPUT"

      - name: Build (Simulator)
        run: |
          set -euxo pipefail
          echo "Using scheme: ${{ steps.resolve.outputs.SCHEME }}"
          echo "Using destination: ${{ steps.resolve.outputs.DEST_BUILD }}"
          xcodebuild \
            -project "$PROJECT_FILE" \
            -scheme "${{ steps.resolve.outputs.SCHEME }}" \
            -sdk iphonesimulator \
            -destination "${{ steps.resolve.outputs.DEST_BUILD }}" \
            build \
            -parallelizeTargets \
            -derivedDataPath "$PWD/DerivedData" \
            | tee build.log

      - name: Test (Simulator)
        run: |
          set -euxo pipefail
          xcodebuild \
            -project "$PROJECT_FILE" \
            -scheme "${{ steps.resolve.outputs.SCHEME }}" \
            -destination "${{ steps.resolve.outputs.DEST_TEST }}" \
            test \
            -derivedDataPath "$PWD/DerivedData" \
            | tee test.log

      - name: Archive built .app (Simulator)
        if: success()
        run: |
          set -euo pipefail
          mkdir -p build_artifacts
          APP_PATH=$(find "$PWD/DerivedData/Build/Products" -type d -name "*.app" -path "*/-iphonesimulator/*" -print0 \
            | xargs -0 -I{} stat -f "%m\t%N" {} \
            | sort -rn \
            | awk 'NR==1{print $2}')
          if [ -z "${APP_PATH:-}" ]; then
            echo "Could not locate a built Simulator .app in DerivedData."
            exit 1
          fi
          echo "Found app at: $APP_PATH"
          cp -R "$APP_PATH" build_artifacts/PetProgress.app

      - name: Upload artifact (Simulator .app)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: PetProgress-Simulator-App
          path: build_artifacts/PetProgress.app

      - name: Upload xcodebuild logs (on failure or success)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: |
            build.log
            test.log
          if-no-files-found: ignore
